// Sistema de IA para atendimento humanizado com fluxo completo
export class AIService {
  constructor(storeConfig, products, promotions) {
    this.storeConfig = storeConfig;
    this.products = products;
    this.promotions = promotions;
  }

  // Processar mensagem do cliente com IA
  processMessage(session, message) {
    const lowerMessage = message.toLowerCase().trim();
    const context = this.analyzeContext(session, message);

    // Fluxo principal baseado no step atual
    switch (session.step) {
      case 'greeting':
        return this.handleGreeting(session, message, context);
      
      case 'ordering':
        return this.handleOrdering(session, message, context);
      
      case 'delivery_type':
        return this.handleDeliveryType(session, message, context);
      
      case 'address_street':
      case 'address_number':
      case 'address_district':
      case 'address_city':
      case 'address_reference':
        return this.handleAddress(session, message, session.step, context);
      
      case 'customer_name':
        return this.handleCustomerName(session, message, context);
      
      case 'payment_method':
        return this.handlePayment(session, message, context);
      
      case 'cash_amount':
        return this.handleCashAmount(session, message, context);
      
      case 'waiting_pix_proof':
        return this.handlePixProof(session, message, context);
      
      default:
        return this.handleUnknown(session, message, context);
    }
  }

  // Analisar contexto da conversa
  analyzeContext(session, message) {
    const context = {
      isFirstTime: (session.messages?.length || 0) < 3,
      hasCart: session.cart && session.cart.length > 0,
      cartTotal: session.cart?.reduce((sum, item) => sum + (item.product.price * item.quantity), 0) || 0,
      customerName: session.customerData?.name,
      timeOfDay: this.getTimeOfDay(),
      messageSentiment: this.analyzeSentiment(message),
      previousMessages: session.messages?.slice(-3) || [],
      isRushHour: this.isRushHour()
    };

    return context;
  }

  // Analisar sentimento da mensagem
  analyzeSentiment(message) {
    const positiveWords = ['obrigado', 'valeu', 'legal', 'bom', '√≥timo', 'excelente', 'gostei', 'adoro', 'perfeito'];
    const negativeWords = ['ruim', 'p√©ssimo', 'horr√≠vel', 'n√£o gosto', 'detesto', 'problema', 'erro', 'cancelar'];
    
    const lowerMessage = message.toLowerCase();
    
    const positiveCount = positiveWords.filter(word => lowerMessage.includes(word)).length;
    const negativeCount = negativeWords.filter(word => lowerMessage.includes(word)).length;
    
    if (positiveCount > negativeCount) return 'positive';
    if (negativeCount > positiveCount) return 'negative';
    return 'neutral';
  }

  // Obter per√≠odo do dia
  getTimeOfDay() {
    const hour = new Date().getHours();
    if (hour >= 5 && hour < 12) return 'morning';
    if (hour >= 12 && hour < 18) return 'afternoon';
    if (hour >= 18 && hour < 22) return 'evening';
    return 'night';
  }

  // Verificar se √© hor√°rio de pico
  isRushHour() {
    const hour = new Date().getHours();
    return (hour >= 11 && hour <= 14) || (hour >= 18 && hour <= 21);
  }

  // Tratar sauda√ß√£o inicial - SEMPRE envia foto do card√°pio
  handleGreeting(session, message, context) {
    const lowerMessage = message.toLowerCase();
    
    // Se for primeira mensagem, sempre envia boas-vindas + card√°pio
    if (context.isFirstTime) {
      const customerName = session.customerData?.name || null;
      return {
        response: this.generateWelcomeResponse(context, customerName),
        nextStep: 'ordering',
        shouldSendImage: this.storeConfig.menuImage || this.storeConfig.menuImages?.[0]
      };
    }
    
    // Se n√£o for primeira vez, verifica inten√ß√µes
    if (lowerMessage.includes('card√°pio') || lowerMessage.includes('cardapio') || lowerMessage === '1') {
      return {
        response: this.generateMenuResponse(context),
        nextStep: 'ordering',
        shouldSendImage: this.storeConfig.menuImage || this.storeConfig.menuImages?.[0]
      };
    }
    
    if (lowerMessage.includes('promo√ß√£o') || lowerMessage.includes('promocao') || lowerMessage === '2') {
      return {
        response: this.generatePromotionsResponse(context),
        nextStep: 'ordering'
      };
    }
    
    // Para qualquer outra mensagem, volta ao card√°pio
    return {
      response: this.generateMenuResponse(context),
      nextStep: 'ordering',
      shouldSendImage: this.storeConfig.menuImage || this.storeConfig.menuImages?.[0]
    };
  }

  // Gerar resposta de boas-vindas
  generateWelcomeResponse(context, customerName = null) {
    // Usar a mensagem de sauda√ß√£o configurada nas configura√ß√µes da loja
    if (this.storeConfig.greeting) {
      const nameGreeting = customerName ? `, ${customerName}` : '';
      const personalizedGreeting = this.storeConfig.greeting.replace(
        /Ol√°!|Oi!|Bem-vindo/gi, 
        (match) => {
          const timeGreetings = {
            morning: 'Bom dia',
            afternoon: 'Boa tarde', 
            evening: 'Boa noite',
            night: 'Boa noite'
          };
          const greeting = timeGreetings[context.timeOfDay] || 'Ol√°';
          return `${greeting}${nameGreeting}!`;
        }
      );
      
      return personalizedGreeting;
    }
    
    // Fallback para mensagem padr√£o se n√£o houver configura√ß√£o
    const timeGreetings = {
      morning: 'Bom dia',
      afternoon: 'Boa tarde', 
      evening: 'Boa noite',
      night: 'Boa noite'
    };
    
    const greeting = timeGreetings[context.timeOfDay] || 'Ol√°';
    const storeName = this.storeConfig.name;
    const nameGreeting = customerName ? `, ${customerName}` : '';
    
    const welcomeMessages = [
      `${greeting}${nameGreeting}! üëã Que alegria ter voc√™ aqui na ${storeName}! üòä\n\nAcabei de preparar nosso card√°pio especial pra voc√™! üçï‚ú®\n\nMe conta, o que voc√™ t√° com vontade de experimentar hoje? üòã`,
      
      `${greeting}${nameGreeting}! üéâ Bem-vindo(a) √† ${storeName}! T√¥ super feliz de te atender! üòÑ\n\nOlha s√≥ que card√°pio incr√≠vel preparei pra voc√™! üçïüî•\n\nQual del√≠cia vai ser hoje? ü§î`,
      
      `${greeting}${nameGreeting}! üåü Oi, tudo bem? Que bom que voc√™ veio pra ${storeName}! üòä\n\nD√° uma olhada no nosso card√°pio que t√° uma del√≠cia! üçïüí´\n\nMe fala o que voc√™ t√° afim de comer! üòç`,
      
      `${greeting}${nameGreeting}! üéä Seja muito bem-vindo(a) √† ${storeName}! T√¥ aqui pra te ajudar! üòÑ\n\nAcabei de organizar nosso card√°pio com as melhores op√ß√µes! üçï‚≠ê\n\nO que voc√™ gostaria de pedir? üòã`
    ];
    
    return welcomeMessages[Math.floor(Math.random() * welcomeMessages.length)];
  }

  // Gerar resposta do card√°pio
  generateMenuResponse(context) {
    const menuMessages = [
      `Perfeito! üçï Aqui est√° nosso card√°pio completo da ${this.storeConfig.name}!\n\nTodas as op√ß√µes est√£o fresquinhas e prontas pra voc√™! üòä\n\nMe conta, qual del√≠cia voc√™ t√° com vontade? üòã`,
      
      `√ìtima escolha! üìñ Aqui est√° nosso card√°pio com todas as op√ß√µes dispon√≠veis!\n\nCada item foi preparado com muito carinho! ‚ù§Ô∏è\n\nO que voc√™ gostaria de experimentar hoje? ü§î`,
      
      `Claro! üçΩÔ∏è Aqui est√° nosso card√°pio completo!\n\nTodas as op√ß√µes est√£o uma del√≠cia, pode escolher sem medo! üòÑ\n\nQual vai ser sua escolha? üòç`,
      
      `Beleza! üçï Aqui est√° nosso card√°pio da ${this.storeConfig.name}!\n\nTodas as op√ß√µes est√£o incr√≠veis, vai ser dif√≠cil escolher! üòÖ\n\nMe fala o que voc√™ t√° afim! üòã`
    ];
    
    return menuMessages[Math.floor(Math.random() * menuMessages.length)];
  }

  // Gerar resposta de promo√ß√µes
  generatePromotionsResponse(context) {
    const activePromotions = this.promotions.filter(p => p.active);
    
    if (activePromotions.length === 0) {
      const noPromoMessages = [
        `No momento n√£o temos promo√ß√µes ativas, mas nosso card√°pio est√° recheado de op√ß√µes deliciosas! üòä\n\nQue tal dar uma olhada no nosso card√°pio? Digite "1" ou "card√°pio"! üçï`,
        
        `Hoje n√£o temos promo√ß√µes, mas nosso card√°pio est√° uma del√≠cia! üòÑ\n\nD√° uma olhada nas nossas op√ß√µes! Digite "1" ou "card√°pio"! üçï‚ú®`,
        
        `Promo√ß√µes acabaram, mas nosso card√°pio continua incr√≠vel! üòä\n\nVem ver as op√ß√µes! Digite "1" ou "card√°pio"! üçïüí´`
      ];
      
      return noPromoMessages[Math.floor(Math.random() * noPromoMessages.length)];
    }
    
    const promoMessages = [
      `üî• Temos promo√ß√µes incr√≠veis para voc√™!\n\n${activePromotions.map(p => `‚Ä¢ ${p.title}: ${p.description} (${p.discount}% OFF)`).join('\n')}\n\nAproveite essas ofertas especiais! üòÑ`,
      
      `üéâ Promo√ß√µes imperd√≠veis pra voc√™!\n\n${activePromotions.map(p => `‚Ä¢ ${p.title}: ${p.description} (${p.discount}% OFF)`).join('\n')}\n\nCorre aproveitar! üòç`,
      
      `üí• Ofertas especiais s√≥ pra voc√™!\n\n${activePromotions.map(p => `‚Ä¢ ${p.title}: ${p.description} (${p.discount}% OFF)`).join('\n')}\n\nN√£o perde essa chance! üöÄ`
    ];
    
    return promoMessages[Math.floor(Math.random() * promoMessages.length)];
  }

  // Tratar pedidos
  handleOrdering(session, message, context) {
    const lowerMessage = message.toLowerCase();
    
    // Detectar finaliza√ß√£o
    if (lowerMessage.includes('finalizar') || lowerMessage.includes('terminar') || lowerMessage.includes('pronto') || lowerMessage.includes('acabei')) {
      if (!context.hasCart) {
        const emptyCartMessages = [
          `Ops! üòÖ Ainda n√£o adicionamos nada ao seu pedido.\n\nQue tal escolher algo delicioso do nosso card√°pio primeiro? üçï\n\nPode me dizer o que voc√™ gostaria de experimentar! üòä`,
          
          `Hmm! ü§î Seu carrinho ainda est√° vazio!\n\nQue tal dar uma olhada no nosso card√°pio e escolher algo incr√≠vel? üçï\n\nMe conta o que voc√™ t√° afim de comer! üòã`,
          
          `üòÖ Ops! Ainda n√£o tem nada no seu pedido!\n\nVamos escolher algo delicioso do nosso card√°pio? üçï\n\nTem v√°rias op√ß√µes incr√≠veis pra voc√™! üòç`,
          
          `ü§î Hmm, seu carrinho t√° vazio!\n\nQue tal escolher algo gostoso do nosso card√°pio? üçï\n\nT√¥ aqui pra te ajudar a escolher! üòÑ`
        ];
        
        return {
          response: emptyCartMessages[Math.floor(Math.random() * emptyCartMessages.length)],
          nextStep: 'ordering'
        };
      }
      
      return {
        response: this.generateFinalizeResponse(session, context),
        nextStep: 'delivery_type'
      };
    }
    
    // Detectar produto
    const product = this.findProduct(message);
    
    if (product) {
      // Adicionar produto ao carrinho
      const existingItem = session.cart?.find(item => item.product.id === product.id);
      if (existingItem) {
        existingItem.quantity += 1;
      } else {
        if (!session.cart) session.cart = [];
        session.cart.push({
          product,
          quantity: 1
        });
      }
      
      return {
        response: this.generateProductAddedResponse(product, session, context),
        nextStep: 'ordering'
      };
    }
    
    return {
      response: this.generateUnknownProductResponse(context),
      nextStep: 'ordering'
    };
  }

  // Encontrar produto por nome
  findProduct(message) {
    const lowerMessage = message.toLowerCase();
    return this.products.find(product => 
      product.name.toLowerCase().includes(lowerMessage) ||
      lowerMessage.includes(product.name.toLowerCase())
    ) || null;
  }

  // Gerar resposta de produto adicionado
  generateProductAddedResponse(product, session, context) {
    const cartItems = session.cart?.map(item => 
      `${item.quantity}x ${item.product.name}`
    ).join(', ') || '';
    
    const productMessages = [
      `üéâ Perfeito! Adicionei ${product.name} ao seu pedido! üòä\n\nüìã *Seu carrinho:*\n${cartItems}\n\nQuer adicionar mais alguma coisa ou finalizar o pedido? ü§î`,
      
      `‚úÖ Beleza! ${product.name} foi adicionado com sucesso! üòÑ\n\nüìã *Seu pedido:*\n${cartItems}\n\nVai querer mais alguma coisa ou finalizar? üòã`,
      
      `üåü √ìtima escolha! ${product.name} t√° no seu carrinho! üòç\n\nüìã *Seu pedido:*\n${cartItems}\n\nQuer adicionar mais alguma coisa ou finalizar? ü§î`,
      
      `üí´ Incr√≠vel! ${product.name} foi adicionado ao seu pedido! ‚ú®\n\nüìã *Seu carrinho:*\n${cartItems}\n\nVai querer mais alguma coisa ou finalizar? üòä`
    ];
    
    return productMessages[Math.floor(Math.random() * productMessages.length)];
  }

  // Gerar resposta de produto n√£o encontrado
  generateUnknownProductResponse(context) {
    const unknownMessages = [
      `Hmm, n√£o encontrei esse produto no nosso card√°pio! üòÖ\n\nPode me dizer o nome exato ou dar uma olhada no card√°pio? üçï\n\nT√¥ aqui pra te ajudar a encontrar o que voc√™ quer! üòä`,
      
      `Ops! N√£o tenho esse produto dispon√≠vel! üòÖ\n\nQue tal dar uma olhada no nosso card√°pio pra ver as op√ß√µes? üçï\n\nTem v√°rias del√≠cias pra voc√™ escolher! üòã`,
      
      `Desculpa, n√£o encontrei esse produto! üòÖ\n\nD√° uma olhada no nosso card√°pio que tem v√°rias op√ß√µes incr√≠veis! üçï\n\nMe fala o que voc√™ t√° afim! üòä`,
      
      `N√£o tenho esse produto no card√°pio! üòÖ\n\nOlha s√≥ as op√ß√µes que temos dispon√≠veis! üçï\n\nTem coisa muito boa pra voc√™! üòç`
    ];
    
    return unknownMessages[Math.floor(Math.random() * unknownMessages.length)];
  }

  // Tratar finaliza√ß√£o do pedido
  generateFinalizeResponse(session, context) {
    const cartItems = session.cart?.map(item => 
      `${item.quantity}x ${item.product.name} - R$ ${(item.product.price * item.quantity).toFixed(2)}`
    ).join('\n') || '';
    
    const subtotal = context.cartTotal;
    
    const finalizeMessages = [
      `üéâ Perfeito! Vamos finalizar seu pedido!\n\nüìã *RESUMO DO PEDIDO:*\n${cartItems}\n\nüí∞ *Subtotal: R$ ${subtotal.toFixed(2)}*\n\nAgora preciso saber:\n\nüöö √â para *ENTREGA* ou *RETIRADA*?\n\nDigite:\n‚Ä¢ "Entrega" ou "1" para entrega\n‚Ä¢ "Retirada" ou "2" para retirar no local`,
      
      `‚úÖ Beleza! Vamos finalizar seu pedido!\n\nüìã *RESUMO DO PEDIDO:*\n${cartItems}\n\nüí∞ *Subtotal: R$ ${subtotal.toFixed(2)}*\n\nAgora me conta:\n\nüöö √â para *ENTREGA* ou *RETIRADA*?\n\nDigite:\n‚Ä¢ "Entrega" ou "1" para entrega\n‚Ä¢ "Retirada" ou "2" para retirar no local`,
      
      `üåü Incr√≠vel! Vamos finalizar seu pedido!\n\nüìã *RESUMO DO PEDIDO:*\n${cartItems}\n\nüí∞ *Subtotal: R$ ${subtotal.toFixed(2)}*\n\nAgora preciso saber:\n\nüöö √â para *ENTREGA* ou *RETIRADA*?\n\nDigite:\n‚Ä¢ "Entrega" ou "1" para entrega\n‚Ä¢ "Retirada" ou "2" para retirar no local`
    ];
    
    return finalizeMessages[Math.floor(Math.random() * finalizeMessages.length)];
  }

  // Tratar tipo de entrega
  handleDeliveryType(session, message, context) {
    const lowerMessage = message.toLowerCase();
    
    if (lowerMessage.includes('entrega') || lowerMessage === '1') {
      const deliveryMessages = [
        `üöö Perfeito! Vamos fazer a entrega na sua casa!\n\nüìù Preciso dos dados do endere√ßo:\n\nüè† *Rua/Avenida:*\n\nDigite o nome da sua rua ou avenida:`,
        
        `üöö Beleza! Vamos entregar na sua casa!\n\nüìù Me conta os dados do endere√ßo:\n\nüè† *Rua/Avenida:*\n\nDigite o nome da sua rua ou avenida:`,
        
        `üöö Incr√≠vel! Vamos levar at√© voc√™!\n\nüìù Preciso dos dados do endere√ßo:\n\nüè† *Rua/Avenida:*\n\nDigite o nome da sua rua ou avenida:`
      ];
      
      return {
        response: deliveryMessages[Math.floor(Math.random() * deliveryMessages.length)],
        nextStep: 'address_street'
      };
    }
    
    if (lowerMessage.includes('retirada') || lowerMessage === '2') {
      const pickupMessages = [
        `‚úÖ √ìtimo! Voc√™ vai retirar no local!\n\nüìã *RESUMO FINAL DO PEDIDO:*\n${this.generateOrderSummary(session, context)}\n\nüí≥ Como voc√™ gostaria de pagar?\n\nDigite:\n‚Ä¢ "PIX" ou "1" para PIX\n‚Ä¢ "Dinheiro" ou "2" para dinheiro\n‚Ä¢ "Cart√£o" ou "3" para cart√£o`,
        
        `üéâ Perfeito! Vai retirar no local!\n\nüìã *RESUMO FINAL DO PEDIDO:*\n${this.generateOrderSummary(session, context)}\n\nüí≥ Como voc√™ gostaria de pagar?\n\nDigite:\n‚Ä¢ "PIX" ou "1" para PIX\n‚Ä¢ "Dinheiro" ou "2" para dinheiro\n‚Ä¢ "Cart√£o" ou "3" para cart√£o`,
        
        `üåü Beleza! Retirada no local!\n\nüìã *RESUMO FINAL DO PEDIDO:*\n${this.generateOrderSummary(session, context)}\n\nüí≥ Como voc√™ gostaria de pagar?\n\nDigite:\n‚Ä¢ "PIX" ou "1" para PIX\n‚Ä¢ "Dinheiro" ou "2" para dinheiro\n‚Ä¢ "Cart√£o" ou "3" para cart√£o`
      ];
      
      return {
        response: pickupMessages[Math.floor(Math.random() * pickupMessages.length)],
        nextStep: 'payment_method'
      };
    }
    
    const errorMessages = [
      `‚ùì Desculpe, n√£o entendi!\n\n√â para *ENTREGA* ou *RETIRADA*?\n\nDigite:\n‚Ä¢ "Entrega" ou "1" para entrega\n‚Ä¢ "Retirada" ou "2" para retirar no local`,
      
      `ü§î Ops! N√£o entendi direito!\n\n√â para *ENTREGA* ou *RETIRADA*?\n\nDigite:\n‚Ä¢ "Entrega" ou "1" para entrega\n‚Ä¢ "Retirada" ou "2" para retirar no local`,
      
      `üòÖ Desculpa! Pode repetir?\n\n√â para *ENTREGA* ou *RETIRADA*?\n\nDigite:\n‚Ä¢ "Entrega" ou "1" para entrega\n‚Ä¢ "Retirada" ou "2" para retirar no local`
    ];
    
    return {
      response: errorMessages[Math.floor(Math.random() * errorMessages.length)],
      nextStep: 'delivery_type'
    };
  }

  // Tratar endere√ßo
  handleAddress(session, message, step, context) {
    switch (step) {
      case 'address_street':
        const streetMessages = [
          `üè† Rua: ${message}\n\nüè¢ *N√∫mero:*\n\nDigite o n√∫mero da casa/apartamento:`,
          `üè† Rua: ${message}\n\nüè¢ *N√∫mero:*\n\nMe conta o n√∫mero da casa/apartamento:`,
          `üè† Rua: ${message}\n\nüè¢ *N√∫mero:*\n\nQual √© o n√∫mero da casa/apartamento?`
        ];
        return {
          response: streetMessages[Math.floor(Math.random() * streetMessages.length)],
          nextStep: 'address_number'
        };
      
      case 'address_number':
        const numberMessages = [
          `üè¢ N√∫mero: ${message}\n\nüèòÔ∏è *Bairro:*\n\nDigite o nome do bairro:`,
          `üè¢ N√∫mero: ${message}\n\nüèòÔ∏è *Bairro:*\n\nMe conta o nome do bairro:`,
          `üè¢ N√∫mero: ${message}\n\nüèòÔ∏è *Bairro:*\n\nQual √© o nome do bairro?`
        ];
        return {
          response: numberMessages[Math.floor(Math.random() * numberMessages.length)],
          nextStep: 'address_district'
        };
      
      case 'address_district':
        const districtMessages = [
          `üèòÔ∏è Bairro: ${message}\n\nüèôÔ∏è *Cidade:*\n\nDigite o nome da cidade:`,
          `üèòÔ∏è Bairro: ${message}\n\nüèôÔ∏è *Cidade:*\n\nMe conta o nome da cidade:`,
          `üèòÔ∏è Bairro: ${message}\n\nüèôÔ∏è *Cidade:*\n\nQual √© o nome da cidade?`
        ];
        return {
          response: districtMessages[Math.floor(Math.random() * districtMessages.length)],
          nextStep: 'address_city'
        };
      
      case 'address_city':
        const cityMessages = [
          `üèôÔ∏è Cidade: ${message}\n\nüìç *Ponto de Refer√™ncia:*\n\nDigite um ponto de refer√™ncia (opcional):`,
          `üèôÔ∏è Cidade: ${message}\n\nüìç *Ponto de Refer√™ncia:*\n\nMe conta um ponto de refer√™ncia (opcional):`,
          `üèôÔ∏è Cidade: ${message}\n\nüìç *Ponto de Refer√™ncia:*\n\nAlgum ponto de refer√™ncia? (opcional)`
        ];
        return {
          response: cityMessages[Math.floor(Math.random() * cityMessages.length)],
          nextStep: 'address_reference'
        };
      
      case 'address_reference':
        const street = session.customerData?.street || '';
        const number = session.customerData?.number || '';
        const district = session.customerData?.district || '';
        const city = session.customerData?.city || '';
        const fullAddress = `${street}, ${number} - ${district}, ${city}`;
        
        const referenceMessages = [
          `üìç Refer√™ncia: ${message}\n\nüìã *RESUMO FINAL DO PEDIDO:*\n${this.generateOrderSummary(session, context)}\n\nüè† *ENDERE√áO:*\n${fullAddress}\n\nüí≥ Como voc√™ gostaria de pagar?\n\nDigite:\n‚Ä¢ "PIX" ou "1" para PIX\n‚Ä¢ "Dinheiro" ou "2" para dinheiro\n‚Ä¢ "Cart√£o" ou "3" para cart√£o`,
          
          `üìç Refer√™ncia: ${message}\n\nüìã *RESUMO FINAL DO PEDIDO:*\n${this.generateOrderSummary(session, context)}\n\nüè† *ENDERE√áO:*\n${fullAddress}\n\nüí≥ Como voc√™ gostaria de pagar?\n\nDigite:\n‚Ä¢ "PIX" ou "1" para PIX\n‚Ä¢ "Dinheiro" ou "2" para dinheiro\n‚Ä¢ "Cart√£o" ou "3" para cart√£o`
        ];
        
        return {
          response: referenceMessages[Math.floor(Math.random() * referenceMessages.length)],
          nextStep: 'payment_method'
        };
      
      default:
        return {
          response: `‚ùì Erro no processamento do endere√ßo. Tente novamente.`,
          nextStep: 'address_street'
        };
    }
  }

  // Tratar nome do cliente
  handleCustomerName(session, message, context) {
    const nameMessages = [
      `üë§ Nome: ${message}\n\nüìã *RESUMO FINAL DO PEDIDO:*\n${this.generateOrderSummary(session, context)}\n\nüí≥ Como voc√™ gostaria de pagar?\n\nDigite:\n‚Ä¢ "PIX" ou "1" para PIX\n‚Ä¢ "Dinheiro" ou "2" para dinheiro\n‚Ä¢ "Cart√£o" ou "3" para cart√£o`,
      
      `üë§ Nome: ${message}\n\nüìã *RESUMO FINAL DO PEDIDO:*\n${this.generateOrderSummary(session, context)}\n\nüí≥ Como voc√™ gostaria de pagar?\n\nDigite:\n‚Ä¢ "PIX" ou "1" para PIX\n‚Ä¢ "Dinheiro" ou "2" para dinheiro\n‚Ä¢ "Cart√£o" ou "3" para cart√£o`
    ];
    
    return {
      response: nameMessages[Math.floor(Math.random() * nameMessages.length)],
      nextStep: 'payment_method'
    };
  }

  // Tratar m√©todo de pagamento
  handlePayment(session, message, context) {
    const lowerMessage = message.toLowerCase();
    
    if (lowerMessage.includes('pix') || lowerMessage === '1') {
      const pixKey = this.storeConfig.pixKey;
      const total = this.calculateTotal(session, context);
      
      const pixMessages = [
        `üí≥ PIX selecionado!\n\nüì± *Chave PIX:* ${pixKey}\nüí∞ *Valor:* R$ ${total.toFixed(2)}\n\nüì∏ Envie o comprovante do PIX para finalizarmos seu pedido!\n\n‚è∞ *Prazo:* 10 minutos`,
        
        `üí≥ Beleza! PIX √© uma √≥tima escolha!\n\nüì± *Chave PIX:* ${pixKey}\nüí∞ *Valor:* R$ ${total.toFixed(2)}\n\nüì∏ Manda o comprovante do PIX pra gente finalizar!\n\n‚è∞ *Prazo:* 10 minutos`,
        
        `üí≥ Perfeito! PIX √© super pr√°tico!\n\nüì± *Chave PIX:* ${pixKey}\nüí∞ *Valor:* R$ ${total.toFixed(2)}\n\nüì∏ Envia o comprovante do PIX pra finalizarmos!\n\n‚è∞ *Prazo:* 10 minutos`
      ];
      
      return {
        response: pixMessages[Math.floor(Math.random() * pixMessages.length)],
        nextStep: 'waiting_pix_proof'
      };
    }
    
    if (lowerMessage.includes('dinheiro') || lowerMessage === '2') {
      const total = this.calculateTotal(session, context);
      
      const cashMessages = [
        `üíµ Dinheiro selecionado!\n\nüí∞ *Total do pedido:* R$ ${total.toFixed(2)}\n\nüí∏ Qual valor voc√™ vai pagar?\n\nDigite o valor (ex: 50.00):`,
        
        `üíµ Beleza! Dinheiro √© sempre uma boa op√ß√£o!\n\nüí∞ *Total do pedido:* R$ ${total.toFixed(2)}\n\nüí∏ Qual valor voc√™ vai pagar?\n\nDigite o valor (ex: 50.00):`,
        
        `üíµ Perfeito! Dinheiro √© super pr√°tico!\n\nüí∞ *Total do pedido:* R$ ${total.toFixed(2)}\n\nüí∏ Qual valor voc√™ vai pagar?\n\nDigite o valor (ex: 50.00):`
      ];
      
      return {
        response: cashMessages[Math.floor(Math.random() * cashMessages.length)],
        nextStep: 'cash_amount'
      };
    }
    
    if (lowerMessage.includes('cart√£o') || lowerMessage.includes('cartao') || lowerMessage === '3') {
      return this.finalizeOrder(session, context, 'CARD');
    }
    
    const paymentErrorMessages = [
      `‚ùì Desculpe, n√£o entendi!\n\nüí≥ Como voc√™ gostaria de pagar?\n\nDigite:\n‚Ä¢ "PIX" ou "1" para PIX\n‚Ä¢ "Dinheiro" ou "2" para dinheiro\n‚Ä¢ "Cart√£o" ou "3" para cart√£o`,
      
      `ü§î Ops! N√£o entendi direito!\n\nüí≥ Como voc√™ gostaria de pagar?\n\nDigite:\n‚Ä¢ "PIX" ou "1" para PIX\n‚Ä¢ "Dinheiro" ou "2" para dinheiro\n‚Ä¢ "Cart√£o" ou "3" para cart√£o`,
      
      `üòÖ Desculpa! Pode repetir?\n\nüí≥ Como voc√™ gostaria de pagar?\n\nDigite:\n‚Ä¢ "PIX" ou "1" para PIX\n‚Ä¢ "Dinheiro" ou "2" para dinheiro\n‚Ä¢ "Cart√£o" ou "3" para cart√£o`
    ];
    
    return {
      response: paymentErrorMessages[Math.floor(Math.random() * paymentErrorMessages.length)],
      nextStep: 'payment_method'
    };
  }

  // Tratar valor em dinheiro
  handleCashAmount(session, message, context) {
    const amount = parseFloat(message.replace(/[^\d,.]/g, '').replace(',', '.'));
    const total = this.calculateTotal(session, context);
    
    if (isNaN(amount) || amount < total) {
      const errorMessages = [
        `‚ùå Valor inv√°lido!\n\nüí∞ *Total do pedido:* R$ ${total.toFixed(2)}\n\nüí∏ Digite um valor maior ou igual ao total:`,
        
        `üòÖ Ops! O valor precisa ser maior que o total!\n\nüí∞ *Total do pedido:* R$ ${total.toFixed(2)}\n\nüí∏ Digite um valor maior ou igual ao total:`,
        
        `ü§î Hmm, esse valor n√£o d√°!\n\nüí∞ *Total do pedido:* R$ ${total.toFixed(2)}\n\nüí∏ Digite um valor maior ou igual ao total:`
      ];
      
      return {
        response: errorMessages[Math.floor(Math.random() * errorMessages.length)],
        nextStep: 'cash_amount'
      };
    }
    
    const change = amount - total;
    
    return this.finalizeOrder(session, context, 'CASH', amount, change);
  }

  // Tratar comprovante PIX
  handlePixProof(session, message, context) {
    return this.finalizeOrder(session, context, 'PIX');
  }

  // Finalizar pedido
  finalizeOrder(session, context, paymentMethod, cashAmount, change) {
    const total = this.calculateTotal(session, context);
    const deliveryType = session.customerData?.deliveryType || 'pickup';
    const customerName = session.customerData?.name || 'Cliente';
    
    const finalizeMessages = [
      `üéâ *PEDIDO FINALIZADO COM SUCESSO!*\n\nüë§ *Cliente:* ${customerName}\nüìã *Resumo:* ${this.generateOrderSummary(session, context)}\nüí∞ *Total:* R$ ${total.toFixed(2)}\nüöö *Tipo:* ${deliveryType === 'delivery' ? 'Entrega' : 'Retirada'}\nüí≥ *Pagamento:* ${this.getPaymentMethodText(paymentMethod)}${paymentMethod === 'CASH' && cashAmount && change !== undefined ? `\nüí∏ *Valor pago:* R$ ${cashAmount.toFixed(2)}\nüîÑ *Troco:* R$ ${change.toFixed(2)}` : ''}${deliveryType === 'delivery' && session.customerData ? `\nüè† *Endere√ßo:* ${session.customerData.street}, ${session.customerData.number} - ${session.customerData.district}, ${session.customerData.city}${session.customerData.reference ? `\nüìç *Refer√™ncia:* ${session.customerData.reference}` : ''}` : ''}\n\n‚è∞ *Tempo estimado:* ${deliveryType === 'delivery' ? '30-45 minutos' : '15-20 minutos'}\nüìû *Contato:* ${this.storeConfig.address}\n\nObrigado pela prefer√™ncia! üòä`,
      
      `‚úÖ *PEDIDO CONFIRMADO!*\n\nüë§ *Cliente:* ${customerName}\nüìã *Resumo:* ${this.generateOrderSummary(session, context)}\nüí∞ *Total:* R$ ${total.toFixed(2)}\nüöö *Tipo:* ${deliveryType === 'delivery' ? 'Entrega' : 'Retirada'}\nüí≥ *Pagamento:* ${this.getPaymentMethodText(paymentMethod)}${paymentMethod === 'CASH' && cashAmount && change !== undefined ? `\nüí∏ *Valor pago:* R$ ${cashAmount.toFixed(2)}\nüîÑ *Troco:* R$ ${change.toFixed(2)}` : ''}${deliveryType === 'delivery' && session.customerData ? `\nüè† *Endere√ßo:* ${session.customerData.street}, ${session.customerData.number} - ${session.customerData.district}, ${session.customerData.city}${session.customerData.reference ? `\nüìç *Refer√™ncia:* ${session.customerData.reference}` : ''}` : ''}\n\n‚è∞ *Tempo estimado:* ${deliveryType === 'delivery' ? '30-45 minutos' : '15-20 minutos'}\nüìû *Contato:* ${this.storeConfig.address}\n\nMuito obrigado! üòç`,
      
      `üåü *PEDIDO FINALIZADO!*\n\nüë§ *Cliente:* ${customerName}\nüìã *Resumo:* ${this.generateOrderSummary(session, context)}\nüí∞ *Total:* R$ ${total.toFixed(2)}\nüöö *Tipo:* ${deliveryType === 'delivery' ? 'Entrega' : 'Retirada'}\nüí≥ *Pagamento:* ${this.getPaymentMethodText(paymentMethod)}${paymentMethod === 'CASH' && cashAmount && change !== undefined ? `\nüí∏ *Valor pago:* R$ ${cashAmount.toFixed(2)}\nüîÑ *Troco:* R$ ${change.toFixed(2)}` : ''}${deliveryType === 'delivery' && session.customerData ? `\nüè† *Endere√ßo:* ${session.customerData.street}, ${session.customerData.number} - ${session.customerData.district}, ${session.customerData.city}${session.customerData.reference ? `\nüìç *Refer√™ncia:* ${session.customerData.reference}` : ''}` : ''}\n\n‚è∞ *Tempo estimado:* ${deliveryType === 'delivery' ? '30-45 minutos' : '15-20 minutos'}\nüìû *Contato:* ${this.storeConfig.address}\n\nObrigado! üòÑ`
    ];
    
    return {
      response: finalizeMessages[Math.floor(Math.random() * finalizeMessages.length)],
      nextStep: 'completed'
    };
  }

  // Gerar resumo do pedido
  generateOrderSummary(session, context) {
    const cartItems = session.cart?.map(item => 
      `${item.quantity}x ${item.product.name}`
    ).join(', ') || '';
    
    const subtotal = context.cartTotal;
    const deliveryFee = session.customerData?.deliveryType === 'delivery' ? this.storeConfig.deliveryFee : 0;
    const total = subtotal + deliveryFee;
    
    let summary = `${cartItems}`;
    if (deliveryFee > 0) {
      summary += `\nüöö Taxa de entrega: R$ ${deliveryFee.toFixed(2)}`;
    }
    summary += `\nüí∞ Total: R$ ${total.toFixed(2)}`;
    
    return summary;
  }

  // Calcular total do pedido
  calculateTotal(session, context) {
    const subtotal = context.cartTotal;
    const deliveryFee = session.customerData?.deliveryType === 'delivery' ? this.storeConfig.deliveryFee : 0;
    return subtotal + deliveryFee;
  }

  // Obter texto do m√©todo de pagamento
  getPaymentMethodText(method) {
    switch (method) {
      case 'PIX': return 'PIX';
      case 'CASH': return 'Dinheiro';
      case 'CARD': return 'Cart√£o';
      default: return method;
    }
  }

  // Tratar mensagem desconhecida
  handleUnknown(session, message, context) {
    const unknownMessages = [
      `Hmm, n√£o entendi muito bem! üòÖ\n\nQue tal dar uma olhada no nosso card√°pio? Digite "card√°pio" ou "1"! üçï\n\nT√¥ aqui pra te ajudar! üòä`,
      
      `Ops! N√£o consegui entender! ü§î\n\nD√° uma olhada no nosso card√°pio! Digite "card√°pio" ou "1"! üçï\n\nTem v√°rias del√≠cias pra voc√™! üòã`,
      
      `Desculpa, n√£o entendi! üòÖ\n\nQue tal ver nosso card√°pio? Digite "card√°pio" ou "1"! üçï\n\nT√¥ aqui pra te ajudar a escolher! üòÑ`,
      
      `ü§î Hmm, n√£o entendi direito!\n\nD√° uma olhada no nosso card√°pio! Digite "card√°pio" ou "1"! üçï\n\nTem coisa muito boa pra voc√™! üòç`
    ];
    
    return {
      response: unknownMessages[Math.floor(Math.random() * unknownMessages.length)],
      nextStep: 'ordering'
    };
  }
} 